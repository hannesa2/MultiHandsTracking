apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "info.mediapipe.multihand.app"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode getGitCommitCount()
        versionName getTag()
        buildConfigField "String", 'GIT_USER', "\"" + getGitUser() + "\""
        buildConfigField "String", 'GIT_REPOSITORY', "\"" + getGitRepository() + "\""
        buildConfigField "String", 'VERSION', "\"" + versionName + "\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file('../signing/release.keystore')
            storePassword System.getenv("KEYSTORE_PASS")
            keyAlias System.getenv("ALIAS_NAME")
            keyPassword System.getenv("ALIAS_PASS")
        }
        debug {
            storePassword "android"
            keyPassword "android"
            keyAlias "androiddebugkey"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (file('../signing/release.keystore').exists()) {
                if (System.getenv("KEYSTORE_PASS") == null || System.getenv("ALIAS_NAME") == null || System.getenv("ALIAS_PASS") == null) {
                    println "Keystore exists, but I use DEBUG signing because variables are not set !"
                    signingConfig signingConfigs.debug
                } else {
                    println "Keystore exists and I use RELEASE signing"
                    signingConfig signingConfigs.release
                }
            } else {
                println "I run somewhere else and I use debug signing"
                signingConfig signingConfigs.debug
            }
        }
        debug {
            if (System.getenv("CI") == "true") { // Github action
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            applicationIdSuffix ".debug"
        }
    }

    compileOptions {
        targetCompatibility = 1.8
        sourceCompatibility = 1.8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.github.AppDevNext.Logcat:LogcatCore:2.4.0'
    implementation project(':library')
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'com.github.hannesa2:githubAppUpdate:1.1'

    androidTestImplementation 'com.github.AppDevNext:Moka:0.4'
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
}

static def getGitOriginRemote() {
    def process = "git remote -v".execute()
    def values = process.text.toString().trim().split("\\r\\n|\\n|\\r")

    def found = values.find { it.startsWith("origin") && it.endsWith("(push)") }
    return found.replace("origin", "").replace("(push)", "").replace(".git", "").trim()
}

static def getGitUser() {
    def token = getGitOriginRemote().split("/")
    return token[3]
}

static def getGitRepository() {
    def token = getGitOriginRemote().split("/")
    return token[4]
}