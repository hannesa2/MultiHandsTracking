apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "info.mediapipe.multihand.app"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode getGitCommitCount()
        versionName getTag()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility = 1.8
        sourceCompatibility = 1.8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'com.github.AppDevNext.Logcat:LogcatCore:2.1.1'
    implementation project(':library')
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    androidTestImplementation 'com.github.AppDevNext:Moka:0.4'
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
}

def adbDirectory = '/storage/emulated/0/Download' // api 28
//def adbDirectory = '/storage/self/primary/Download' // api 21
def reportsDirectory = "$projectDir/../screenshots/adb"

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    println "clearScreenshotsTask"
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', adbDirectory
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    println "createScreenshotDirectoryTask"
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', adbDirectory
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    println "fetchScreenshotsTask"
    executable "${android.getAdbExe().toString()}"
    args 'pull', adbDirectory + '/.', reportsDirectory

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedDebugAndroidTest' || task.name == 'connectedCodeDebugAndroidTest') {
        task.mustRunAfter {
            clearScreenshotsTask
            createScreenshotDirectoryTask
        }
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}
